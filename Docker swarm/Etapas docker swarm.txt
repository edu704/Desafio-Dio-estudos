O Docker Swarm é um orquestrador
O Docker Swarm é capaz de alocar e reiniciar containers de maneira automática
Como criar máquinas já provisionadas para utilizar o Docker com a Docker Machine utilizando comando docker-machine create
Um cluster é um conjunto de máquinas dividindo poder computacional
Como criar um cluster utilizando o Docker Swarm utilizando o comando docker swarm init

Que nós workers são responsáveis por executar containers
Comandos de leitura e visualização de nós, como o docker node ls
Comandos que leem ou alteram o estado do swarm só podem ser executados em nós managers
O comando docker container run sobe containers em escopo local e o docker service create cria serviços em escopo do swarm
Tarefas são instâncias de serviços
Portas são compartilhadas entre nós do swarm e são acessíveis a partir de qualquer nó graças ao routing mesh

Que nós managers são primariamente responsáveis pela orquestração do swarm
A importância e como realizar o backup do swarm
Que podemos ter mais de um nó manager no swarm
A importância do Leader dentro do swarm
Como é feita a eleição de um novo Leader em caso de falhas
Os requisitos para funcionamento do RAFT

Nesta aula, aprendemos:

Como readicionar um manager posterior a uma falha
Restringir nós de executarem quaisquer serviços utilizando o docker node update --availability drain
Restringir serviços de serem executados em determinados nós utilizando o docker service update --constraint-add

Serviços replicados rodam em um ou mais nós do swarm
Serviços globais rodam em todos os nós do swarm
Nós managers por padrão trabalham como workers
Serviços como monitoramento e segurança são bons exemplos de serviços globais
Como definir o modo que o serviço será criado utilizando a flag --mode no momento da criação do serviço